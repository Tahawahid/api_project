// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api_project.api.Data;

#nullable disable

namespace api_project.api.Migrations
{
    [DbContext(typeof(ApiProjectDBContext))]
    [Migration("20250610062305_Seeding data for Difficulties and Regions")]
    partial class SeedingdataforDifficultiesandRegions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("api_project.api.Model.Domain.Difficulty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Difficulties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("27d53c7c-4d97-422e-876a-6093659436f9"),
                            Name = "Easy"
                        },
                        new
                        {
                            Id = new Guid("e9b4e741-b526-414a-96fd-fdc6d7d13e98"),
                            Name = "Medium"
                        },
                        new
                        {
                            Id = new Guid("1f47584e-8a47-4ec9-8705-d95fba905964"),
                            Name = "Hard"
                        });
                });

            modelBuilder.Entity("api_project.api.Model.Domain.Regions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1c8f0d2-3e4f-4c5a-9b6d-7e8f9a0b1c2d"),
                            Code = "REG001",
                            Name = "North Region",
                            RegionImageUrl = "https://example.com/north-region.jpg"
                        },
                        new
                        {
                            Id = new Guid("c2d3e4f5-6a7b-8c9d-a0b1-c2d3e4f5a6b7"),
                            Code = "REG002",
                            Name = "South Region",
                            RegionImageUrl = "https://example.com/south-region.jpg"
                        },
                        new
                        {
                            Id = new Guid("d3e4f5a6-b7c8-d9e0-f1a2-b3c4d5e6f7a8"),
                            Code = "REG003",
                            Name = "East Region",
                            RegionImageUrl = "https://example.com/east-region.jpg"
                        },
                        new
                        {
                            Id = new Guid("e4f5a6b7-c8d9-e0f1-a2b3-c4d5e6f7a8b9"),
                            Code = "REG004",
                            Name = "West Region",
                            RegionImageUrl = "https://example.com/west-region.jpg"
                        });
                });

            modelBuilder.Entity("api_project.api.Model.Domain.Walk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DifficultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WalkImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("lenghtInKM")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("RegionId");

                    b.ToTable("Walks");
                });

            modelBuilder.Entity("api_project.api.Model.Domain.Walk", b =>
                {
                    b.HasOne("api_project.api.Model.Domain.Difficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_project.api.Model.Domain.Regions", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Difficulty");

                    b.Navigation("Region");
                });
#pragma warning restore 612, 618
        }
    }
}
